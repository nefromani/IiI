-- ===== –ë–´–°–¢–†–ê–Ø –ü–†–û–í–ï–†–ö–ê HWID –ë–ï–ó –ó–ê–î–ï–†–ñ–ï–ö =====55
if not _G.SCRIPT_KEY then
    game.Players.LocalPlayer:Kick("‚ùå –£–∫–∞–∂–∏—Ç–µ _G.SCRIPT_KEY –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º!")
    return
end

local MY_HWID = _G.SCRIPT_KEY
local LOCAL_NODE_HWID_URL = "http://127.0.0.1:51949/hwid"

local function http_get(url)
    if syn and syn.request then
        local ok, res = pcall(function() return syn.request({Method = "GET", Url = url}) end)
        if ok and res and res.Body then return res.Body end
    end
    if game and game.HttpGet then
        local ok, res = pcall(function() return game:HttpGet(url, true) end)
        if ok and res then return res end
    end
    return nil
end

print("üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ HWID...")
local server_hwid = (http_get(LOCAL_NODE_HWID_URL) or ""):gsub("%s+","")

if server_hwid == "" then
    game.Players.LocalPlayer:Kick("‚ùå Python —Å–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç!")
    return
end

if server_hwid ~= MY_HWID then
    game.Players.LocalPlayer:Kick("‚ùå HWID –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç!\n–°–µ—Ä–≤–µ—Ä: " .. server_hwid)
    return
end

print("‚úÖ HWID –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞!")

-- ===== –£–õ–£–ß–®–ï–ù–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –ó–ê–ì–†–£–ó–ö–ò =====
local function waitForFullLoad()
    print("[Loading] Waiting for game to fully load...")
    
    if not game:IsLoaded() then
        game.Loaded:Wait()
        print("[Loading] Game basic loading complete")
    end
    
    local RunService = game:GetService("RunService")
    for i = 1, 10 do
        RunService.Heartbeat:Wait()
    end
    print("[Loading] RunService ready")
    
    local Players = game:GetService("Players")
    local LocalPlayer = Players.LocalPlayer
    
    while not LocalPlayer do
        wait(1)
        LocalPlayer = Players.LocalPlayer
        print("[Loading] Waiting for LocalPlayer...")
    end
    print("[Loading] LocalPlayer ready")
    
    while not LocalPlayer:FindFirstChild("PlayerGui") do
        wait(1)
        print("[Loading] Waiting for PlayerGui...")
    end
    print("[Loading] PlayerGui ready")
    
    local CoreGui
    for attempt = 1, 10 do
        local success, result = pcall(function()
            return game:GetService("CoreGui")
        end)
        
        if success and result then
            CoreGui = result
            local testSuccess = pcall(function()
                local testGui = Instance.new("ScreenGui")
                testGui.Parent = CoreGui
                testGui:Destroy()
            end)
            
            if testSuccess then
                print("[Loading] CoreGui ready and functional")
                break
            end
        end
        wait(0.5)
    end
    
    if not CoreGui then
        error("Failed to get CoreGui after 10 attempts!")
    end

    wait(2)
    
    local existingGUI = CoreGui:FindFirstChild("AUFJoinerUI")
    if existingGUI then
        print("[Loading] Removing existing GUI...")
        existingGUI:Destroy()
        wait(0.5)
    end
    
    print("[Loading] ‚úÖ All systems ready for UI creation!")
    return CoreGui
end

-- ===== –¢–í–û–ô –û–°–ù–û–í–ù–û–ô –°–ö–†–ò–ü–¢ =====
local WebSocketURL = "ws://127.0.0.1:51948"

local function prints(str)
    print("[AUFJoiner]: " .. str)
end

local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local player = Players.LocalPlayer
local VIM = (pcall(function() return game:GetService("VirtualInputManager") end) and game:GetService("VirtualInputManager")) or nil

local function calculateScore(players, money)
    local currentPlayers = tonumber(players:match("(%d+)/")) or 8
    local freeSlots = 8 - currentPlayers
    local moneyValue = tonumber(money:match("%d+")) or 0
    
    if freeSlots >= 5 then
        return freeSlots * 2000000 + moneyValue * 500
    elseif freeSlots >= 3 then
        return freeSlots * 1500000 + moneyValue * 1000
    else
        return freeSlots * 500000 + moneyValue * 2000
    end
end

local isActive = false
local ws = nil
local connection = nil
local menuGui, hopperButton, lockButton, logText, discordLabel, spammerButton
local jobQueue = {}
local jobsByName = {}
local currentBestJob = nil
local isProcessing = false
local lastProcessedJob = nil
local isUILocked = true

-- ===== SPAMMER =====
local isSpammerActive = false
local spamCooldown = 5
local lastSpamJob = nil
local lastSpamTime = 0

local function addLog(message)
    if not logText then return end
    logText.Text = "‚Üí " .. message
end

local function findTargetGui()
    local coreGui = game:GetService("CoreGui")
    
    local screenGui = coreGui:FindFirstChild("ScreenGui")
    if screenGui then
        local main1 = screenGui:FindFirstChild("Main")
        if main1 then
            local main2 = main1:FindFirstChild("Main")
            if main2 then
                local server = main2:FindFirstChild("Server")
                if server then
                    local scrollingFrame = server:FindFirstChild("ScrollingFrame")
                    if scrollingFrame then
                        return scrollingFrame
                    end
                end
            end
        end
    end
    
    return nil
end

local function findJobIDTextBox()
    local gui = findTargetGui()
    if not gui then return nil end

    for _, desc in ipairs(gui:GetDescendants()) do
        if desc:IsA("TextBox") and string.find(desc.Name, "Input") then
            if string.find(desc:GetFullName(), "Job") then
                return desc
            end
        end
    end
    return nil
end


local function setJobIDText(_, text)
    local textBox = findJobIDTextBox()
    if not textBox then 
        prints("‚ùå TextBox –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return false 
    end

    textBox:CaptureFocus()
    task.wait(0.05)
    textBox.Text = text
    task.wait(0.05)
    textBox:ReleaseFocus()
    
    return true
end

local function findJoinButton(gui)
    if not gui then return nil end
    for _, d in ipairs(gui:GetDescendants()) do
        if d:IsA("TextLabel") and d.Text == "Join Job-ID" then
            local parent = d.Parent
            for _, child in ipairs(parent:GetChildren()) do
                if child:IsA("TextButton") then
                    return child
                end
            end
        end
    end
end

local function fireFirstConnectionOfSignal(sig)
    if type(sig) ~= "userdata" then return false end
    local ok_get, _ = pcall(function() return getconnections end)
    if not ok_get then return false end
    local ok, conns = pcall(function() return getconnections(sig) end)
    if not ok or not conns or #conns == 0 then return false end
    local success, _ = pcall(function() conns[1]:Fire() end)
    return success
end

-- –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ TextBox JobID —Å fallback
local function autoFillJobID(jobID)
    local textBox = findJobIDTextBox()
    if not textBox then
        prints("‚ùå TextBox –¥–ª—è Job-ID –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return false
    end

    textBox:CaptureFocus()
    task.wait(0.05)
    textBox.Text = jobID
    task.wait(0.05)
    textBox:ReleaseFocus()

    if textBox.Text == jobID then
        prints("[SUCCESS] JobID –≤—Å—Ç–∞–≤–ª–µ–Ω: " .. jobID)
        return true
    else
        prints("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤—Å—Ç–∞–≤–∏—Ç—å JobID")
        return false
    end
end

-- –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∫–ª–∏–∫ Join –∫–Ω–æ–ø–∫–∏ —Å fallback
local function autoClickJoin()
    local gui = findTargetGui()
    if not gui then return false end

    for _, desc in ipairs(gui:GetDescendants()) do
        if desc:IsA("TextButton") and string.find(desc.Text, "Join") then
            -- Fire connections
            if desc.Activated then
                for _, con in ipairs(getconnections(desc.Activated)) do
                    pcall(function() con:Fire() end)
                end
                prints("[SUCCESS] Join –Ω–∞–∂–∞—Ç–∞ —á–µ—Ä–µ–∑ Activated")
                return true
            end
        end
    end

    prints("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∂–∞—Ç—å Join")
    return false
end




local function insertSorted(jobData)
    if #jobQueue == 0 then
        table.insert(jobQueue, jobData)
        return
    end
    
    local left, right = 1, #jobQueue + 1
    while left < right do
        local mid = math.floor((left + right) / 2)
        if jobQueue[mid].score > jobData.score then
            left = mid + 1
        else
            right = mid
        end
    end
    table.insert(jobQueue, left, jobData)
end

local function addJob(jobData)
    if jobsByName[jobData.name] then
        for i, v in ipairs(jobQueue) do
            if v.name == jobData.name then
                table.remove(jobQueue, i)
                break
            end
        end
    end

    insertSorted(jobData)
    jobsByName[jobData.name] = jobData

    while #jobQueue > 10 do
        local removed = table.remove(jobQueue)
        jobsByName[removed.name] = nil
    end
end

-- –û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê (1 —Ä–∞–∑ –∑–∞—Ö–æ–¥–∏—Ç –∏ –∂–¥–µ—Ç)
local function processBestJob()
    if not currentBestJob or isProcessing then return end
    isProcessing = true

    local startTime = tick()  -- –º–æ–º–µ–Ω—Ç, –∫–æ–≥–¥–∞ –Ω–∞—á–∞–ª–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å job

    local playersInfo = currentBestJob.players
    local moneyInfo = currentBestJob.money
    local nameInfo = currentBestJob.name
    addLog("Joining: " .. nameInfo .. " | " .. playersInfo .. " | " .. moneyInfo .. "/sec")

if not autoFillJobID(currentBestJob.jobId) then
    addLog("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—Å—Ç–∞–≤–∏—Ç—å JobID")
    isProcessing = false
    return
end

task.wait(0.05)

if not autoClickJoin() then
    addLog("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∂–∞—Ç—å Join")
    isProcessing = false
    return
end


    local endTime = tick()  -- –º–æ–º–µ–Ω—Ç, –∫–æ–≥–¥–∞ –Ω–∞–∂–∞–ª–∏ Join
    local duration = endTime - startTime
    print(string.format("[AUFJoiner] Job processed in %.3f seconds", duration))

    lastProcessedJob = currentBestJob
    if isSpammerActive then
        lastSpamJob = currentBestJob.jobId
        lastSpamTime = tick()
    end
    
    isProcessing = false
    currentBestJob = nil
    
    -- –£–¥–∞–ª—è–µ–º –∏–∑ –æ—á–µ—Ä–µ–¥–∏
    for i, job in ipairs(jobQueue) do
        if job.jobId == lastProcessedJob.jobId then
            table.remove(jobQueue, i)
            jobsByName[job.name] = nil
            break
        end
    end
end


-- –û–°–ù–û–í–ù–û–ô –¶–ò–ö–õ (—Ç–æ–ª—å–∫–æ 1 —Ä–∞–∑ –∑–∞—Ö–æ–¥–∏—Ç)
local function processingLoop()
    while true do
        if isActive and #jobQueue > 0 and not isProcessing then
            currentBestJob = jobQueue[1]
            processBestJob() -- –¢–û–õ–¨–ö–û 1 –†–ê–ó
        end
        task.wait(0.05)
    end
end

-- –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –°–ü–ê–ú–ï–† –¶–ò–ö–õ
local function spammerLoop()
    while true do
        if isSpammerActive and isActive and lastSpamJob then
            local currentTime = tick()
            local elapsed = currentTime - lastSpamTime

            if elapsed <= spamCooldown then
                if setJobIDText(nil, lastSpamJob) then
                    task.wait(0.05)
                    if autoClickJoin() then
                        addLog("üîÑ Spammer retry: " .. lastSpamJob)
                    end
                end
            end
        end
        task.wait(0.1)
    end
end


local function connectWebSocket()
    local success, socket = pcall(WebSocket.connect, WebSocketURL)
    if success and socket then
        ws = socket
        connection = ws.OnMessage:Connect(function(msg)
            if not isActive then return end

            local name, money, players, jobId = msg:match("(.+)|(.+)|(.+)|(.+)")
            if name and money and players and jobId then
                local jobData = {
                    name = name,
                    money = money,
                    players = players,
                    jobId = jobId,
                    score = calculateScore(players, money)
                }

                addLog("Added: " .. name .. " | " .. players .. " | " .. money .. "/sec")
                addJob(jobData)
            end
        end)

        ws.OnClose:Connect(function()
            addLog("Disconnected")
        end)
        
        addLog("‚úÖ Connected to server")
    else
        addLog("‚ùå Connection failed")
    end
end

local function createUI()
    local CoreGui = game:GetService("CoreGui")
    
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "AUFJoinerUI"
    screenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    
    local discordScreenGui = Instance.new("ScreenGui")
    discordScreenGui.Name = "AUFJoinerDiscord"
    discordScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    
    discordLabel = Instance.new("TextLabel")
    discordLabel.Name = "DiscordLink"
    discordLabel.Text = "https://discord.gg/T9jXGCKmqw"
    discordLabel.Size = UDim2.new(0, 400, 0, 60)
    discordLabel.Position = UDim2.new(0.5, -200, 0, 5)
    discordLabel.TextColor3 = Color3.fromRGB(88, 101, 242)
    discordLabel.BackgroundTransparency = 1
    discordLabel.Font = Enum.Font.GothamBlack
    discordLabel.TextSize = 20
    discordLabel.TextXAlignment = Enum.TextXAlignment.Center
    discordLabel.TextYAlignment = Enum.TextYAlignment.Center
    discordLabel.TextStrokeTransparency = 0.5
    discordLabel.TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
    discordLabel.Parent = discordScreenGui

    local mainFrame = Instance.new("Frame")
    mainFrame.Name = "MainFrame"
    mainFrame.Size = UDim2.new(0, 300, 0, 120)
    mainFrame.Position = UDim2.new(0.5, -150, 0, 70)
    mainFrame.BackgroundColor3 = Color3.fromRGB(20, 20, 25)
    mainFrame.BackgroundTransparency = 0.1
    mainFrame.BorderSizePixel = 0
    mainFrame.Active = not isUILocked
    mainFrame.Draggable = not isUILocked

    -- –ö–ù–û–ü–ö–ê –°–ü–ê–ú–ï–†–ê –°–õ–ï–í–ê (–°–ò–ù–Ø–Ø)
    spammerButton = Instance.new("TextButton")
    spammerButton.Text = "S"
    spammerButton.Size = UDim2.new(0, 30, 0, 30)
    spammerButton.Position = UDim2.new(0, 10, 0, 15) -- –°–õ–ï–í–ê
    spammerButton.BackgroundColor3 = Color3.fromRGB(70, 130, 200) -- –°–ò–ù–ò–ô –¶–í–ï–¢
    spammerButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    spammerButton.Font = Enum.Font.GothamBold
    spammerButton.TextSize = 14

    hopperButton = Instance.new("TextButton")
    hopperButton.Text = "HOPPER"
    hopperButton.Size = UDim2.new(0, 200, 0, 40)
    hopperButton.Position = UDim2.new(0.5, -100, 0, 10)
    hopperButton.BackgroundColor3 = Color3.fromRGB(60, 60, 70)
    hopperButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    hopperButton.Font = Enum.Font.GothamBold
    hopperButton.TextSize = 16

    lockButton = Instance.new("TextButton")
    lockButton.Text = "üîí"
    lockButton.Size = UDim2.new(0, 40, 0, 40)
    lockButton.Position = UDim2.new(1, -45, 0, 10) -- –°–ü–†–ê–í–ê
    lockButton.BackgroundColor3 = Color3.fromRGB(180, 60, 60)
    lockButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    lockButton.Font = Enum.Font.GothamBold
    lockButton.TextSize = 18

    logText = Instance.new("TextLabel")
    logText.Text = "Ready to start..."
    logText.Size = UDim2.new(1, -20, 0, 40)
    logText.Position = UDim2.new(0, 10, 0, 60)
    logText.TextColor3 = Color3.fromRGB(220, 220, 220)
    logText.BackgroundColor3 = Color3.fromRGB(30, 30, 35)
    logText.BackgroundTransparency = 0.3
    logText.Font = Enum.Font.GothamMedium
    logText.TextSize = 14
    logText.TextXAlignment = Enum.TextXAlignment.Left
    logText.TextYAlignment = Enum.TextYAlignment.Top
    logText.TextWrapped = true

    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 8)
    corner.Parent = mainFrame

    local buttonCorner = Instance.new("UICorner")
    buttonCorner.CornerRadius = UDim.new(0, 6)
    buttonCorner.Parent = hopperButton
    buttonCorner:Clone().Parent = lockButton
    buttonCorner:Clone().Parent = spammerButton

    local logCorner = Instance.new("UICorner")
    logCorner.CornerRadius = UDim.new(0, 6)
    logCorner.Parent = logText

    hopperButton.Parent = mainFrame
    lockButton.Parent = mainFrame
    spammerButton.Parent = mainFrame
    logText.Parent = mainFrame
    mainFrame.Parent = screenGui
    
    screenGui.Parent = CoreGui
    discordScreenGui.Parent = CoreGui
    
    return screenGui
end

-- ===== –ì–õ–ê–í–ù–´–ô –ó–ê–ü–£–°–ö =====
prints("Loading AUFJoiner system...")

local CoreGuiReady = waitForFullLoad()
menuGui = createUI()

hopperButton.MouseButton1Click:Connect(function()
    isActive = not isActive
    if isActive then
        hopperButton.Text = "WORKING..."
        hopperButton.BackgroundColor3 = Color3.fromRGB(60, 180, 80)
        addLog("Started hopping...")
        connectWebSocket()
    else
        hopperButton.Text = "HOPPER"
        hopperButton.BackgroundColor3 = Color3.fromRGB(60, 60, 70)
        addLog("Stopped")
        if connection then connection:Disconnect() end
        if ws then ws:Close() end
    end
end)

lockButton.MouseButton1Click:Connect(function()
    isUILocked = not isUILocked
    local mainFrame = menuGui:FindFirstChild("MainFrame")

    if mainFrame then
        if isUILocked then
            lockButton.Text = "üîí"
            lockButton.BackgroundColor3 = Color3.fromRGB(180, 60, 60)
            mainFrame.Active = false
            mainFrame.Draggable = false
            addLog("UI Locked")
        else
            lockButton.Text = "üîì"
            lockButton.BackgroundColor3 = Color3.fromRGB(60, 180, 80)
            mainFrame.Active = true
            mainFrame.Draggable = true
            addLog("UI Unlocked")
        end
    end
end)

-- –ö–ù–û–ü–ö–ê –°–ü–ê–ú–ï–†–ê
spammerButton.MouseButton1Click:Connect(function()
    isSpammerActive = not isSpammerActive
    if isSpammerActive then
        spammerButton.BackgroundColor3 = Color3.fromRGB(60, 120, 200) -- –Ø–†–ö–û-–°–ò–ù–ò–ô –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏
        addLog("üîÑ Spammer: ON (5s retry)")
    else
        spammerButton.BackgroundColor3 = Color3.fromRGB(70, 130, 200) -- –û–ë–´–ß–ù–´–ô –°–ò–ù–ò–ô –ø—Ä–∏ –≤—ã–∫–ª—é—á–µ–Ω–∏–∏
        addLog("üîÑ Spammer: OFF (single attempt)")
    end
end)

spawn(processingLoop)
spawn(spammerLoop)

local GuiService = cloneref(game:GetService("GuiService"))
task.spawn(function()
    while true do
        GuiService:ClearError()
        task.wait(0.01)
    end
end)

prints("‚úÖ AUFJoiner system loaded successfully!")




