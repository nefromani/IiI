-- ===== –ë–´–°–¢–†–ê–Ø –ü–†–û–í–ï–†–ö–ê HWID –ë–ï–ó –ó–ê–î–ï–†–ñ–ï–ö =====55
if not _G.SCRIPT_KEY then
    game.Players.LocalPlayer:Kick("‚ùå –£–∫–∞–∂–∏—Ç–µ _G.SCRIPT_KEY –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º!")
    return
end

local MY_HWID = _G.SCRIPT_KEY
local LOCAL_NODE_HWID_URL = "http://127.0.0.1:51949/hwid"

local function http_get(url)
    if syn and syn.request then
        local ok, res = pcall(function() return syn.request({Method = "GET", Url = url}) end)
        if ok and res and res.Body then return res.Body end
    end
    if game and game.HttpGet then
        local ok, res = pcall(function() return game:HttpGet(url, true) end)
        if ok and res then return res end
    end
    return nil
end

print("üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ HWID...")
local server_hwid = (http_get(LOCAL_NODE_HWID_URL) or ""):gsub("%s+","")

if server_hwid == "" then
    game.Players.LocalPlayer:Kick("‚ùå Python —Å–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç!")
    return
end

if server_hwid ~= MY_HWID then
    game.Players.LocalPlayer:Kick("‚ùå HWID –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç!\n–°–µ—Ä–≤–µ—Ä: " .. server_hwid)
    return
end

print("‚úÖ HWID –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞!")

-- ===== –£–õ–£–ß–®–ï–ù–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –ó–ê–ì–†–£–ó–ö–ò =====
local function waitForFullLoad()
    print("[Loading] Waiting for game to fully load...")
    
    if not game:IsLoaded() then
        game.Loaded:Wait()
        print("[Loading] Game basic loading complete")
    end
    
    local RunService = game:GetService("RunService")
    for i = 1, 10 do
        RunService.Heartbeat:Wait()
    end
    print("[Loading] RunService ready")
    
    local Players = game:GetService("Players")
    local LocalPlayer = Players.LocalPlayer
    
    while not LocalPlayer do
        wait(1)
        LocalPlayer = Players.LocalPlayer
        print("[Loading] Waiting for LocalPlayer...")
    end
    print("[Loading] LocalPlayer ready")
    
    while not LocalPlayer:FindFirstChild("PlayerGui") do
        wait(1)
        print("[Loading] Waiting for PlayerGui...")
    end
    print("[Loading] PlayerGui ready")
    
    local CoreGui
    for attempt = 1, 10 do
        local success, result = pcall(function()
            return game:GetService("CoreGui")
        end)
        
        if success and result then
            CoreGui = result
            local testSuccess = pcall(function()
                local testGui = Instance.new("ScreenGui")
                testGui.Parent = CoreGui
                testGui:Destroy()
            end)
            
            if testSuccess then
                print("[Loading] CoreGui ready and functional")
                break
            end
        end
        wait(0.5)
    end
    
    if not CoreGui then
        error("Failed to get CoreGui after 10 attempts!")
    end

    wait(2)
    
    local existingGUI = CoreGui:FindFirstChild("AUFJoinerUI")
    if existingGUI then
        print("[Loading] Removing existing GUI...")
        existingGUI:Destroy()
        wait(0.5)
    end
    
    print("[Loading] ‚úÖ All systems ready for UI creation!")
    return CoreGui
end

-- ===== –¢–í–û–ô –û–°–ù–û–í–ù–û–ô –°–ö–†–ò–ü–¢ =====
local WebSocketURL = "ws://127.0.0.1:51948"

local function prints(str)
    print("[AUFJoiner]: " .. str)
end

local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local player = Players.LocalPlayer
local VIM = (pcall(function() return game:GetService("VirtualInputManager") end) and game:GetService("VirtualInputManager")) or nil

local function calculateScore(players, money)
    local currentPlayers = tonumber(players:match("(%d+)/")) or 8
    local freeSlots = 8 - currentPlayers
    local moneyValue = tonumber(money:match("%d+")) or 0
    
    if freeSlots >= 5 then
        return freeSlots * 2000000 + moneyValue * 500
    elseif freeSlots >= 3 then
        return freeSlots * 1500000 + moneyValue * 1000
    else
        return freeSlots * 500000 + moneyValue * 2000
    end
end

local isActive = false
local ws = nil
local connection = nil
local menuGui, hopperButton, lockButton, logText, discordLabel, spammerButton
local jobQueue = {}
local jobsByName = {}
local currentBestJob = nil
local isProcessing = false
local lastProcessedJob = nil
local isUILocked = true

-- ===== SPAMMER =====
local isSpammerActive = false
local spamCooldown = 5
local lastSpamJob = nil
local lastSpamTime = 0

local function addLog(message)
    if not logText then return end
    logText.Text = "‚Üí " .. message
end

-- ===== –û–ë–ù–û–í–õ–ï–ù–ù–´–ï –§–£–ù–ö–¶–ò–ò –ü–û–ò–°–ö–ê –ò–ù–¢–ï–†–§–ï–ô–°–ê =====

-- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ—á–Ω–æ–≥–æ TextBox (–Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è)
local function findJobIDTextBox()
    local coreGui = game:GetService("CoreGui")
    
    -- –ù–æ–≤—ã–π –ø—É—Ç—å: CoreGui.ScreenGui.Main.Main.Server.ScrollingFrame.Job-ID Input.Main.Input
    local screenGui = coreGui:FindFirstChild("ScreenGui")
    if not screenGui then
        return nil
    end
    
    local main1 = screenGui:FindFirstChild("Main")
    if not main1 then
        return nil
    end
    
    local main2 = main1:FindFirstChild("Main")
    if not main2 then
        return nil
    end
    
    local server = main2:FindFirstChild("Server")
    if not server then
        return nil
    end
    
    local scrollingFrame = server:FindFirstChild("ScrollingFrame")
    if not scrollingFrame then
        return nil
    end
    
    local jobIDInput = scrollingFrame:FindFirstChild("Job-ID Input")
    if not jobIDInput then
        return nil
    end
    
    local mainFrame = jobIDInput:FindFirstChild("Main")
    if not mainFrame then
        return nil
    end
    
    local inputTextBox = mainFrame:FindFirstChild("Input")
    if not inputTextBox or not inputTextBox:IsA("TextBox") then
        return nil
    end
    
    return inputTextBox
end

-- –ó–∞–ø–∞—Å–Ω–æ–π –ø–æ–∏—Å–∫ TextBox
local function fallbackFindJobIDTextBox()
    
    local coreGui = game:GetService("CoreGui")
    
    -- –ò—â–µ–º TextBox —Å –∏–º–µ–Ω–µ–º "Input" –≤ –ø—É—Ç–∏ —Å–æ–¥–µ—Ä–∂–∞—â–µ–º Job-ID
    for _, descendant in pairs(coreGui:GetDescendants()) do
        if descendant:IsA("TextBox") and descendant.Name == "Input" then
            local fullName = descendant:GetFullName()
            if string.find(fullName, "Job%-ID") then
                return descendant
            end
        end
    end
    
    prints("‚ùå Job-ID TextBox –Ω–µ –Ω–∞–π–¥–µ–Ω –∑–∞–ø–∞—Å–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º")
    return nil
end

-- –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –∫–Ω–æ–ø–∫–∏ Join Job-ID (–Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è)
local function findJoinButton()
    
    local coreGui = game:GetService("CoreGui")
    
    -- –ù–æ–≤—ã–π –ø—É—Ç—å: CoreGui.ScreenGui.Main.Main.Server.ScrollingFrame.Join Job-ID
    local screenGui = coreGui:FindFirstChild("ScreenGui")
    if not screenGui then
        return nil
    end
    
    local main1 = screenGui:FindFirstChild("Main")
    if not main1 then
        return nil
    end
    
    local main2 = main1:FindFirstChild("Main")
    if not main2 then
        return nil
    end
    
    local server = main2:FindFirstChild("Server")
    if not server then
        return nil
    end
    
    local scrollingFrame = server:FindFirstChild("ScrollingFrame")
    if not scrollingFrame then
        return nil
    end
    
    local joinJobID = scrollingFrame:FindFirstChild("Join Job-ID")
    if not joinJobID then
        return nil
    end
    
    -- –ò—â–µ–º –∫–Ω–æ–ø–∫—É –≤–Ω—É—Ç—Ä–∏ Join Job-ID
    local button = joinJobID:FindFirstChildOfClass("TextButton") or joinJobID:FindFirstChildOfClass("ImageButton")
    if button then
        prints("‚úÖ –ö–Ω–æ–ø–∫–∞ –Ω–∞–π–¥–µ–Ω–∞: " .. button:GetFullName() .. " (" .. button.ClassName .. ")")
        return button
    end
    
    -- –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –≤–æ–∑–º–æ–∂–Ω–æ —Å–∞–º Join Job-ID –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–π
    prints("–ü—Ä—è–º–∞—è –∫–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–≤–µ—Ä—è—é —Å–∞–º Join Job-ID —ç–ª–µ–º–µ–Ω—Ç")
    return joinJobID
end

-- –ó–∞–ø–∞—Å–Ω–æ–π –ø–æ–∏—Å–∫ –∫–Ω–æ–ø–∫–∏ Join
local function fallbackFindJoinButton()
    
    local coreGui = game:GetService("CoreGui")
    
    -- –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å "Join Job-ID" –≤ –∏–º–µ–Ω–∏ –∏–ª–∏ —Ç–µ–∫—Å—Ç–µ
    for _, descendant in pairs(coreGui:GetDescendants()) do
        local name = descendant.Name or ""
        local text = ""
        
        if descendant:IsA("TextLabel") then
            text = descendant.Text or ""
        elseif descendant:IsA("TextButton") then
            text = descendant.Text or ""
        end
        
        if name == "Join Job-ID" or text == "Join Job-ID" then
            
            -- –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –∫–Ω–æ–ø–∫–∞, –∏—â–µ–º –∫–Ω–æ–ø–∫—É —Ä—è–¥–æ–º
            if not (descendant:IsA("TextButton") or descendant:IsA("ImageButton")) then
                local button = descendant:FindFirstChildOfClass("TextButton") or descendant:FindFirstChildOfClass("ImageButton")
                if button then
                    return button
                else
                    return descendant
                end
            else
                return descendant
            end
        end
    end
    
    prints("‚ùå Join –∫–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∑–∞–ø–∞—Å–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º")
    return nil
end

-- –§—É–Ω–∫—Ü–∏—è –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ (–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥)
local function fireFirstConnectionOfSignal(sig)
    if type(sig) ~= "userdata" then return false end
    local ok_get, _ = pcall(function() return getconnections end)
    if not ok_get then return false end
    local ok, conns = pcall(function() return getconnections(sig) end)
    if not ok or not conns or #conns == 0 then return false end
    local success, _ = pcall(function() conns[1]:Fire() end)
    return success
end

-- –§—É–Ω–∫—Ü–∏—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è Job ID (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è)
local function setJobIDText(jobId)
    
    -- –°–ø–æ—Å–æ–± 1: –¢–æ—á–Ω—ã–π –ø—É—Ç—å
    local textBox = findJobIDTextBox()
    
    -- –°–ø–æ—Å–æ–± 2: –ó–∞–ø–∞—Å–Ω–æ–π –ø–æ–∏—Å–∫
    if not textBox then
        textBox = fallbackFindJobIDTextBox()
    end
    
    if not textBox then
        return false
    end
    
    -- –ú–µ—Ç–æ–¥ 1: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å–ø–æ—Å–æ–±
    textBox:CaptureFocus()
    textBox.Text = jobId
    textBox:ReleaseFocus()
    
    -- –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–µ–∫—Å—Ç —É—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è
    if textBox.Text == jobId then
        return true
    else

        
        -- –ú–µ—Ç–æ–¥ 2: –ü—Ä—è–º–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–µ–∑ —Ñ–æ–∫—É—Å–∞
        textBox.Text = jobId
        
        if textBox.Text == jobId then
            return true
        else
            return false
        end
    end
end

-- –§—É–Ω–∫—Ü–∏—è –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ Join (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è)
local function clickJoinButton()
    
    -- –°–ø–æ—Å–æ–± 1: –¢–æ—á–Ω—ã–π –ø—É—Ç—å
    local button = findJoinButton()
    
    -- –°–ø–æ—Å–æ–± 2: –ó–∞–ø–∞—Å–Ω–æ–π –ø–æ–∏—Å–∫
    if not button then
        button = fallbackFindJoinButton()
    end
    
    if not button then
        prints("‚ùå –ö–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return false
    end
    
    
    -- –°–ø–æ—Å–æ–± 1: getconnections –¥–ª—è Activated (—Å–∞–º—ã–π –Ω–∞–¥–µ–∂–Ω—ã–π)
    if button.Activated then
        local ok = fireFirstConnectionOfSignal(button.Activated)
        if ok then
            return true
        end
    end
    
    -- –°–ø–æ—Å–æ–± 2: getconnections –¥–ª—è MouseButton1Up
    if button.MouseButton1Up then
        local ok = fireFirstConnectionOfSignal(button.MouseButton1Up)
        if ok then
            return true
        end
    end
    
    -- –°–ø–æ—Å–æ–± 3: getconnections –¥–ª—è MouseButton1Click
    if button.MouseButton1Click then
        local ok = fireFirstConnectionOfSignal(button.MouseButton1Click)
        if ok then
            return true
        end
    end
    
    -- –°–ø–æ—Å–æ–± 4: Activate –º–µ—Ç–æ–¥
    if button.Activate then
        local success, err = pcall(function() 
            button:Activate() 
        end)
        if success then
            return true
        else
        end
    end
    
    -- –°–ø–æ—Å–æ–± 5: VIM fallback
    if VIM and button.AbsolutePosition and button.AbsoluteSize then
        local success, err = pcall(function()
            local absPos = button.AbsolutePosition
            local absSize = button.AbsoluteSize
            local x = absPos.X + absSize.X/2
            local y = absPos.Y + absSize.Y/2
            VIM:SendMouseButtonEvent(x, y, 0, true, game, 1)
            VIM:SendMouseButtonEvent(x, y, 0, false, game, 1)
        end)
        
        if success then
            return true
        else
            prints("‚ö†Ô∏è –û—à–∏–±–∫–∞ VIM: " .. tostring(err))
        end
    end
    
    prints("‚ùå –í—Å–µ —Å–ø–æ—Å–æ–±—ã –∫–ª–∏–∫–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏")
    return false
end

local function insertSorted(jobData)
    if #jobQueue == 0 then
        table.insert(jobQueue, jobData)
        return
    end
    
    local left, right = 1, #jobQueue + 1
    while left < right do
        local mid = math.floor((left + right) / 2)
        if jobQueue[mid].score > jobData.score then
            left = mid + 1
        else
            right = mid
        end
    end
    table.insert(jobQueue, left, jobData)
end

local function addJob(jobData)
    if jobsByName[jobData.name] then
        for i, v in ipairs(jobQueue) do
            if v.name == jobData.name then
                table.remove(jobQueue, i)
                break
            end
        end
    end

    insertSorted(jobData)
    jobsByName[jobData.name] = jobData

    while #jobQueue > 10 do
        local removed = table.remove(jobQueue)
        jobsByName[removed.name] = nil
    end
end

-- –û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è)
local function processBestJob()
    if not currentBestJob or isProcessing then return end
    isProcessing = true

    local startTime = tick()

    local playersInfo = currentBestJob.players
    local moneyInfo = currentBestJob.money
    local nameInfo = currentBestJob.name
    addLog("Joining: " .. nameInfo .. " | " .. playersInfo .. " | " .. moneyInfo .. "/sec")

    -- –®–∞–≥ 1: –ó–∞–ø–æ–ª–Ω—è–µ–º Job ID
    if not setJobIDText(currentBestJob.jobId) then
        addLog("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—Å—Ç–∞–≤–∏—Ç—å JobID")
        isProcessing = false
        return
    end


    -- –®–∞–≥ 2: –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É Join
    if not clickJoinButton() then
        addLog("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∂–∞—Ç—å Join")
        isProcessing = false
        return
    end

    local endTime = tick()
    local duration = endTime - startTime
    prints("Job processed in " .. string.format("%.3f", duration) .. " seconds")

    lastProcessedJob = currentBestJob
    if isSpammerActive then
        lastSpamJob = currentBestJob.jobId
        lastSpamTime = tick()
    end
    
    isProcessing = false
    currentBestJob = nil
    
    -- –£–¥–∞–ª—è–µ–º –∏–∑ –æ—á–µ—Ä–µ–¥–∏
    for i, job in ipairs(jobQueue) do
        if job.jobId == lastProcessedJob.jobId then
            table.remove(jobQueue, i)
            jobsByName[job.name] = nil
            break
        end
    end
end

-- –û–°–ù–û–í–ù–û–ô –¶–ò–ö–õ
local function processingLoop()
    local RunService = game:GetService("RunService")
    RunService.Heartbeat:Connect(function()
        if isActive and #jobQueue > 0 and not isProcessing then
            currentBestJob = jobQueue[1]
            processBestJob()
        end
    end)
end


-- –°–ü–ê–ú–ï–† –¶–ò–ö–õ
local MIN_DELAY = 0.01  -- –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∫–ª–∏–∫–∞–º–∏ (10ms)
local lastClickTime = 0

RunService.Heartbeat:Connect(function()
    if isSpammerActive and isActive and lastSpamJob then
        local currentTime = tick()
        local elapsed = currentTime - lastClickTime

        if elapsed >= MIN_DELAY then
            setJobIDText(lastSpamJob)
            clickJoinButton()
            addLog("üîÑ Spammer retry: " .. lastSpamJob)
            lastClickTime = currentTime
        end
    end
end)



local function connectWebSocket()
    local success, socket = pcall(WebSocket.connect, WebSocketURL)
    if success and socket then
        ws = socket
        connection = ws.OnMessage:Connect(function(msg)
            if not isActive then return end

            local name, money, players, jobId = msg:match("(.+)|(.+)|(.+)|(.+)")
            if name and money and players and jobId then
                local jobData = {
                    name = name,
                    money = money,
                    players = players,
                    jobId = jobId,
                    score = calculateScore(players, money)
                }

                addLog("Added: " .. name .. " | " .. players .. " | " .. money .. "/sec")
                addJob(jobData)
            end
        end)

        ws.OnClose:Connect(function()
            addLog("Disconnected")
        end)
        
        addLog("‚úÖ Connected to server")
    else
        addLog("‚ùå Connection failed")
    end
end

local function createUI()
    local CoreGui = game:GetService("CoreGui")
    
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "AUFJoinerUI"
    screenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    
    local discordScreenGui = Instance.new("ScreenGui")
    discordScreenGui.Name = "AUFJoinerDiscord"
    discordScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    
    discordLabel = Instance.new("TextLabel")
    discordLabel.Name = "DiscordLink"
    discordLabel.Text = "https://discord.gg/T9jXGCKmqw"
    discordLabel.Size = UDim2.new(0, 400, 0, 60)
    discordLabel.Position = UDim2.new(0.5, -200, 0, 5)
    discordLabel.TextColor3 = Color3.fromRGB(88, 101, 242)
    discordLabel.BackgroundTransparency = 1
    discordLabel.Font = Enum.Font.GothamBlack
    discordLabel.TextSize = 20
    discordLabel.TextXAlignment = Enum.TextXAlignment.Center
    discordLabel.TextYAlignment = Enum.TextYAlignment.Center
    discordLabel.TextStrokeTransparency = 0.5
    discordLabel.TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
    discordLabel.Parent = discordScreenGui

    local mainFrame = Instance.new("Frame")
    mainFrame.Name = "MainFrame"
    mainFrame.Size = UDim2.new(0, 300, 0, 120)
    mainFrame.Position = UDim2.new(0.5, -150, 0, 70)
    mainFrame.BackgroundColor3 = Color3.fromRGB(20, 20, 25)
    mainFrame.BackgroundTransparency = 0.1
    mainFrame.BorderSizePixel = 0
    mainFrame.Active = not isUILocked
    mainFrame.Draggable = not isUILocked

    -- –ö–ù–û–ü–ö–ê –°–ü–ê–ú–ï–†–ê –°–õ–ï–í–ê (–°–ò–ù–Ø–Ø)
    spammerButton = Instance.new("TextButton")
    spammerButton.Text = "S"
    spammerButton.Size = UDim2.new(0, 30, 0, 30)
    spammerButton.Position = UDim2.new(0, 10, 0, 15)
    spammerButton.BackgroundColor3 = Color3.fromRGB(70, 130, 200)
    spammerButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    spammerButton.Font = Enum.Font.GothamBold
    spammerButton.TextSize = 14

    hopperButton = Instance.new("TextButton")
    hopperButton.Text = "HOPPER"
    hopperButton.Size = UDim2.new(0, 200, 0, 40)
    hopperButton.Position = UDim2.new(0.5, -100, 0, 10)
    hopperButton.BackgroundColor3 = Color3.fromRGB(60, 60, 70)
    hopperButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    hopperButton.Font = Enum.Font.GothamBold
    hopperButton.TextSize = 16

    lockButton = Instance.new("TextButton")
    lockButton.Text = "üîí"
    lockButton.Size = UDim2.new(0, 40, 0, 40)
    lockButton.Position = UDim2.new(1, -45, 0, 10)
    lockButton.BackgroundColor3 = Color3.fromRGB(180, 60, 60)
    lockButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    lockButton.Font = Enum.Font.GothamBold
    lockButton.TextSize = 18

    logText = Instance.new("TextLabel")
    logText.Text = "Ready to start..."
    logText.Size = UDim2.new(1, -20, 0, 40)
    logText.Position = UDim2.new(0, 10, 0, 60)
    logText.TextColor3 = Color3.fromRGB(220, 220, 220)
    logText.BackgroundColor3 = Color3.fromRGB(30, 30, 35)
    logText.BackgroundTransparency = 0.3
    logText.Font = Enum.Font.GothamMedium
    logText.TextSize = 14
    logText.TextXAlignment = Enum.TextXAlignment.Left
    logText.TextYAlignment = Enum.TextYAlignment.Top
    logText.TextWrapped = true

    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 8)
    corner.Parent = mainFrame

    local buttonCorner = Instance.new("UICorner")
    buttonCorner.CornerRadius = UDim.new(0, 6)
    buttonCorner.Parent = hopperButton
    buttonCorner:Clone().Parent = lockButton
    buttonCorner:Clone().Parent = spammerButton

    local logCorner = Instance.new("UICorner")
    logCorner.CornerRadius = UDim.new(0, 6)
    logCorner.Parent = logText

    hopperButton.Parent = mainFrame
    lockButton.Parent = mainFrame
    spammerButton.Parent = mainFrame
    logText.Parent = mainFrame
    mainFrame.Parent = screenGui
    
    screenGui.Parent = CoreGui
    discordScreenGui.Parent = CoreGui
    
    return screenGui
end

-- ===== –ì–õ–ê–í–ù–´–ô –ó–ê–ü–£–°–ö =====
prints("Loading AUFJoiner system...")

local CoreGuiReady = waitForFullLoad()
menuGui = createUI()

hopperButton.MouseButton1Click:Connect(function()
    isActive = not isActive
    if isActive then
        hopperButton.Text = "WORKING..."
        hopperButton.BackgroundColor3 = Color3.fromRGB(60, 180, 80)
        addLog("Started hopping...")
        connectWebSocket()
    else
        hopperButton.Text = "HOPPER"
        hopperButton.BackgroundColor3 = Color3.fromRGB(60, 60, 70)
        addLog("Stopped")
        if connection then connection:Disconnect() end
        if ws then ws:Close() end
    end
end)

lockButton.MouseButton1Click:Connect(function()
    isUILocked = not isUILocked
    local mainFrame = menuGui:FindFirstChild("MainFrame")

    if mainFrame then
        if isUILocked then
            lockButton.Text = "üîí"
            lockButton.BackgroundColor3 = Color3.fromRGB(180, 60, 60)
            mainFrame.Active = false
            mainFrame.Draggable = false
            addLog("UI Locked")
        else
            lockButton.Text = "üîì"
            lockButton.BackgroundColor3 = Color3.fromRGB(60, 180, 80)
            mainFrame.Active = true
            mainFrame.Draggable = true
            addLog("UI Unlocked")
        end
    end
end)

-- –ö–ù–û–ü–ö–ê –°–ü–ê–ú–ï–†–ê
spammerButton.MouseButton1Click:Connect(function()
    isSpammerActive = not isSpammerActive
    if isSpammerActive then
        spammerButton.BackgroundColor3 = Color3.fromRGB(60, 120, 200)
        addLog("üîÑ Spammer: ON (5s retry)")
    else
        spammerButton.BackgroundColor3 = Color3.fromRGB(70, 130, 200)
        addLog("üîÑ Spammer: OFF (single attempt)")
    end
end)

spawn(processingLoop)
spawn(spammerLoop)

local GuiService = cloneref(game:GetService("GuiService"))
task.spawn(function()
    while true do
        GuiService:ClearError()
        task.wait(0.01)
    end
end)

prints("‚úÖ AUFJoiner system loaded successfully!")



