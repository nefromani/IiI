(function()
    -- –ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫ –±–µ–∑ –∑–∞–¥–µ—Ä–∂–µ–∫
    game.Loaded:Wait()
    
    local WebSocketURL = "ws://127.0.0.1:51948"

    local function prints(str)
        print("[AUFJoiner]: " .. str)
    end

    local RunService = game:GetService("RunService")
    local ContentProvider = game:GetService("ContentProvider")

    -- === –£–º–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –≤—ã–±–æ—Ä–∞ === --
    local function calculateScore(players, money)
        local currentPlayers = tonumber(players:match("(%d+)/")) or 8
        local freeSlots = 8 - currentPlayers
        local moneyValue = tonumber(money:match("%d+")) or 0
        
        if freeSlots >= 5 then
            return freeSlots * 2000000 + moneyValue * 500
        elseif freeSlots >= 3 then
            return freeSlots * 1500000 + moneyValue * 1000
        else
            return freeSlots * 500000 + moneyValue * 2000
        end
    end

    local isActive = false
    local ws = nil
    local connection = nil
    local menuGui, hopperButton, lockButton, logText
    local jobQueue = {}
    local jobsByName = {}
    local currentBestJob = nil
    local isProcessing = false
    local lastProcessedJob = nil
    local spamTimer = 0
    local maxSpamTime = 10
    local isUILocked = true

    local function addLog(message)
        if not logText then return end
        logText.Text = "‚Üí " .. message
    end

    local function findTargetGui()
        for _, gui in ipairs(game:GetService('CoreGui'):GetDescendants()) do
            if gui:IsA('ScreenGui') and gui.Name == 'Orion' then
                return gui
            end
        end
        return nil
    end

    local function setJobIDText(targetGui, text)
        for _, descendant in ipairs(targetGui:GetDescendants()) do
            if descendant:IsA('TextLabel') and descendant.Text == 'Job-ID Input' then
                local parentFrame = descendant.Parent
                if not parentFrame:IsA('Frame') then continue end

                for _, frameChild in ipairs(parentFrame:GetChildren()) do
                    if frameChild:IsA('Frame') then
                        local textBox = frameChild:FindFirstChildOfClass('TextBox')
                        if textBox then
                            textBox.Text = text
                            textBox:CaptureFocus()
                            textBox:ReleaseFocus()
                            return textBox
                        end
                    end
                end
            end
        end
        return nil
    end

    local function clickJoinButton(targetGui)
        for _, descendant in ipairs(targetGui:GetDescendants()) do
            if descendant:IsA('TextLabel') and descendant.Text == 'Join Job-ID' then
                local parentFrame = descendant.Parent
                return parentFrame:FindFirstChildOfClass('TextButton')
            end
        end
        return nil
    end

    local function clickErrorOkButton()
        for _, gui in ipairs(game:GetService("CoreGui"):GetDescendants()) do
            if gui:IsA("TextButton") and (gui.Text:upper() == "OK" or gui.Text:upper() == "–û–ö") then
                local parent = gui.Parent
                if parent and parent:IsA("Frame") then
                    local upConnections = getconnections(gui.MouseButton1Up)
                    if #upConnections > 0 then
                        for _, conn in ipairs(upConnections) do
                            conn:Fire()
                        end
                        return true
                    else
                        pcall(function()
                            gui:Fire('MouseButton1Click')
                        end)
                        return true
                    end
                end
            end
        end
        return false
    end

    -- –ë—ã—Å—Ç—Ä–∞—è –±–∏–Ω–∞—Ä–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
    local function insertSorted(jobData)
        if #jobQueue == 0 then
            table.insert(jobQueue, jobData)
            return
        end
        
        local left, right = 1, #jobQueue + 1
        while left < right do
            local mid = math.floor((left + right) / 2)
            if jobQueue[mid].score > jobData.score then
                left = mid + 1
            else
                right = mid
            end
        end
        table.insert(jobQueue, left, jobData)
    end

    local function addJob(jobData)
        if jobsByName[jobData.name] then
            for i, v in ipairs(jobQueue) do
                if v.name == jobData.name then
                    table.remove(jobQueue, i)
                    break
                end
            end
        end

        insertSorted(jobData)
        jobsByName[jobData.name] = jobData

        while #jobQueue > 10 do
            local removed = table.remove(jobQueue)
            jobsByName[removed.name] = nil
        end
    end

    local function processBestJob()
        if not currentBestJob or isProcessing then return end
        isProcessing = true
        lastProcessedJob = currentBestJob

        local startTime = os.clock()

        local playersInfo = currentBestJob.players
        local moneyInfo = currentBestJob.money
        local nameInfo = currentBestJob.name
        addLog("Joining: " .. nameInfo .. " | " .. playersInfo .. " | " .. moneyInfo .. "/sec")

        local targetGui = findTargetGui()
        if not targetGui then
            isProcessing = false
            return
        end

        -- –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –ø—Ä–µ–ª–æ–∞–¥ - –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥
        spawn(function()
            prints("Preloading map for: " .. currentBestJob.jobId)
            local targetPlace = Instance.new("Part")
            targetPlace.Name = "PreloadHelper"
            ContentProvider:PreloadAsync({targetPlace}, function() end)
            pcall(function()
                ContentProvider:PreloadAsync({workspace})
            end)
            prints("Preload finished for: " .. currentBestJob.jobId)
        end)

        if not setJobIDText(targetGui, currentBestJob.jobId) then
            isProcessing = false
            return
        end

        local button = clickJoinButton(targetGui)
        if not button then
            isProcessing = false
            return
        end

        local upConnections = getconnections(button.MouseButton1Up)
        if #upConnections > 0 then
            for _, conn in ipairs(upConnections) do
                conn:Fire()
            end
        else
            button:Fire('MouseButton1Click')
        end

        isProcessing = false
        currentBestJob = nil
        table.remove(jobQueue, 1)

        local elapsed = os.clock() - startTime
        print(string.format("[AUFJoiner] Joiner server - %.3f second", elapsed))

        clickErrorOkButton()
    end

    -- –ò—Å–ø–æ–ª—å–∑—É–µ–º RunService.Heartbeat –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã
    local function processingLoop()
        RunService.Heartbeat:Connect(function()
            if isActive and #jobQueue > 0 and not isProcessing then
                currentBestJob = jobQueue[1]
                processBestJob()
            end
        end)
    end

    local function connectWebSocket()
        local success, socket = pcall(WebSocket.connect, WebSocketURL)
        if success and socket then
            ws = socket
            connection = ws.OnMessage:Connect(function(msg)
                if not isActive then return end

                local name, money, players, jobId = msg:match("(.+)|(.+)|(.+)|(.+)")
                if name and money and players and jobId then
                    local jobData = {
                        name = name,
                        money = money,
                        players = players,
                        jobId = jobId,
                        score = calculateScore(players, money)
                    }

                    addLog("Added: " .. name .. " | " .. players .. " | " .. money .. "/sec")
                    addJob(jobData)
                    spamTimer = 0
                end
            end)

            ws.OnClose:Connect(function()
                addLog("Disconnected")
            end)
        else
            addLog("Connection failed")
        end
    end

    local function createUI()
        local screenGui = Instance.new("ScreenGui")
        screenGui.Name = "AUFJoinerUI"
        screenGui.Parent = game:GetService("CoreGui")
        screenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

        local mainFrame = Instance.new("Frame")
        mainFrame.Name = "MainFrame"
        mainFrame.Size = UDim2.new(0, 300, 0, 120)
        mainFrame.Position = UDim2.new(0.5, -150, 0, 10)
        mainFrame.BackgroundColor3 = Color3.fromRGB(20, 20, 25)
        mainFrame.BackgroundTransparency = 0.1
        mainFrame.BorderSizePixel = 0
        mainFrame.Active = not isUILocked
        mainFrame.Draggable = not isUILocked
        mainFrame.Parent = screenGui

        hopperButton = Instance.new("TextButton")
        hopperButton.Text = "HOPPER"
        hopperButton.Size = UDim2.new(0, 200, 0, 40)
        hopperButton.Position = UDim2.new(0.5, -100, 0, 10)
        hopperButton.BackgroundColor3 = Color3.fromRGB(60, 60, 70)
        hopperButton.TextColor3 = Color3.fromRGB(255, 255, 255)
        hopperButton.Font = Enum.Font.GothamBold
        hopperButton.TextSize = 16
        hopperButton.Parent = mainFrame

        lockButton = Instance.new("TextButton")
        lockButton.Text = "üîí"
        lockButton.Size = UDim2.new(0, 40, 0, 40)
        lockButton.Position = UDim2.new(1, -45, 0, 10)
        lockButton.BackgroundColor3 = Color3.fromRGB(180, 60, 60)
        lockButton.TextColor3 = Color3.fromRGB(255, 255, 255)
        lockButton.Font = Enum.Font.GothamBold
        lockButton.TextSize = 18
        lockButton.Parent = mainFrame

        logText = Instance.new("TextLabel")
        logText.Text = "Ready to start..."
        logText.Size = UDim2.new(1, -20, 0, 40)
        logText.Position = UDim2.new(0, 10, 0, 60)
        logText.TextColor3 = Color3.fromRGB(220, 220, 220)
        logText.BackgroundColor3 = Color3.fromRGB(30, 30, 35)
        logText.BackgroundTransparency = 0.3
        logText.Font = Enum.Font.GothamMedium
        logText.TextSize = 14
        logText.TextXAlignment = Enum.TextXAlignment.Left
        logText.TextYAlignment = Enum.TextYAlignment.Top
        logText.TextWrapped = true
        logText.Parent = mainFrame

        local corner = Instance.new("UICorner")
        corner.CornerRadius = UDim.new(0, 8)
        corner.Parent = mainFrame

        local buttonCorner = Instance.new("UICorner")
        buttonCorner.CornerRadius = UDim.new(0, 6)
        buttonCorner.Parent = hopperButton
        buttonCorner:Clone().Parent = lockButton

        local logCorner = Instance.new("UICorner")
        logCorner.CornerRadius = UDim.new(0, 6)
        logCorner.Parent = logText

        return screenGui
    end

    prints("Loading AUFJoiner system...")
    menuGui = createUI()

    hopperButton.MouseButton1Click:Connect(function()
        isActive = not isActive
        if isActive then
            hopperButton.Text = "WORKING..."
            hopperButton.BackgroundColor3 = Color3.fromRGB(60, 180, 80)
            addLog("Started hopping...")
            connectWebSocket()
        else
            hopperButton.Text = "HOPPER"
            hopperButton.BackgroundColor3 = Color3.fromRGB(60, 60, 70)
            addLog("Stopped")
            if connection then connection:Disconnect() end
            if ws then ws:Close() end
            lastProcessedJob = nil
        end
    end)

    lockButton.MouseButton1Click:Connect(function()
        isUILocked = not isUILocked
        local mainFrame = menuGui:FindFirstChild("MainFrame")

        if mainFrame then
            if isUILocked then
                lockButton.Text = "üîí"
                lockButton.BackgroundColor3 = Color3.fromRGB(180, 60, 60)
                mainFrame.Active = false
                mainFrame.Draggable = false
                addLog("UI Locked")
            else
                lockButton.Text = "üîì"
                lockButton.BackgroundColor3 = Color3.fromRGB(60, 180, 80)
                mainFrame.Active = true
                mainFrame.Draggable = true
                addLog("UI Unlocked - Drag me!")
            end
        end
    end)

    processingLoop()
    spawn(function()
        while true do
            pcall(function()
                game:GetService("GuiService"):ClearError()
            end)
            wait(0.01)
        end
    end)

    prints("AUFJoiner system loaded!")
end)()
